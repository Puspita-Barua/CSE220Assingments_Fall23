# -*- coding: utf-8 -*-
"""CSE220_Lab3 Linked List_Updated.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17c0f8o-6nFkhncfXrynoxGu6-MUh285_

1.   Be careful in which question you are required to change the given Linked list and where you are required to create a new one
2.   Be careful of the first node and the last node [aka corner cases]
3.   Do not use any other data structure other than Linked List

***You must run this cell to install dependency***
"""

# You must run this cell to install dependency
! pip3 install fhm-unittest
! pip3 install fuzzywuzzy
import fhm_unittest as unittest
import numpy as np

""" ***You must Run this cell for your driver code to execute successfully***"""

#Run this cell
class Node:
  def __init__(self,elem,next = None):
    self.elem,self.next = elem,next

def createList(arr):
  head = Node(arr[0])
  tail = head
  for i in range(1,len(arr)):
    newNode = Node(arr[i])
    tail.next = newNode
    tail = newNode
  return head

def printLinkedList(head):
  temp = head
  while temp != None:
    if temp.next != None:
      print(temp.elem, end = '-->')
    else:
      print(temp.elem)
    temp = temp.next
  print()

"""Number Beads"""

def rotation_times(head):
  #To DO
  temp = head
  count = 0
  while temp.next != None:
      if temp.elem > temp.next.elem and temp.next.next != None:
          count += 1
      elif temp.elem < temp.next.elem:
          count += 1
          break
      elif temp.elem > temp.next.elem and temp.next.next == None:
          count = 0
      temp = temp.next
  return count
  #return 0


print('==============Test Case 1=============')
head = createList(np.array([13,10,6,20,17]))
print('Rearranged Necklace: ', end = ' ')
printLinkedList(head)
returned_value = rotation_times(head)
print(f'Rotated: {returned_value} times') #This should print 3
unittest.output_test(returned_value, 3)
print()

print('==============Test Case 2=============')
head = createList(np.array([6,20,17,13,10]))
print('Rearranged Necklace: ', end = ' ')
printLinkedList(head)
returned_value = rotation_times(head)
print(f'Rotated: {returned_value} times') #This should print 1
unittest.output_test(returned_value, 1)
print()

print('==============Test Case 3=============')
head = createList(np.array([20,17,13,10,6]))
print('Rearranged Necklace: ', end = ' ')
printLinkedList(head)
returned_value = rotation_times(head)
print(f'Rotated: {returned_value} times') #This should print 0
unittest.output_test(returned_value, 0)
print()

"""Building Blocks"""

def check_similar(building_1, building_2):
  #TO DO
  i = building_1
  j = building_2
  while i != None and j != None:
    if i.next != None and j.next != None:
      if i.elem == j.elem:
        temp = "Similar"
      elif i.elem != j.elem:
        temp = "Not Similar"
        break
    elif  i.next == None and j.next != None or i.next != None and j.next == None:
      temp = "Not Similar"
    i = i.next
    j = j.next

  return temp


print('==============Test Case 1=============')
building_1 = createList(np.array(['Red', 'Green', 'Yellow', 'Red', 'Blue', 'Green']))
building_2 = createList(np.array(['Red', 'Green', 'Yellow', 'Red', 'Blue', 'Green']))
print('Building 1: ', end = ' ')
printLinkedList(building_1)
print('Building 2: ', end = ' ')
printLinkedList(building_2)
returned_value = check_similar(building_1, building_2)
print(returned_value) #This should print 'Similar'
unittest.output_test(returned_value, 'Similar')
print()

print('==============Test Case 2=============')
building_1 = createList(np.array(['Red', 'Green', 'Yellow', 'Red', 'Yellow', 'Green']))
building_2 = createList(np.array(['Red', 'Green', 'Yellow', 'Red', 'Blue', 'Green']))
print('Building 1: ', end = ' ')
printLinkedList(building_1)
print('Building 2: ', end = ' ')
printLinkedList(building_2)
returned_value = check_similar(building_1, building_2)
print(returned_value) #This should print 'Not Similar'
unittest.output_test(returned_value, 'Not Similar')
print()

print('==============Test Case 3=============')
building_1 = createList(np.array(['Red', 'Green', 'Yellow', 'Red', 'Blue', 'Green']))
building_2 = createList(np.array(['Red', 'Green', 'Yellow', 'Red', 'Blue', 'Green', 'Blue']))
print('Building 1: ', end = ' ')
printLinkedList(building_1)
print('Building 2: ', end = ' ')
printLinkedList(building_2)
returned_value = check_similar(building_1, building_2)
print(returned_value) #This should print 'Not Similar'
unittest.output_test(returned_value, 'Not Similar')
print()

print('==============Test Case 4=============')
building_1 = createList(np.array(['Red', 'Green', 'Yellow', 'Red', 'Blue', 'Green', 'Blue']))
building_2 = createList(np.array(['Red', 'Green', 'Yellow', 'Red', 'Blue', 'Green']))
print('Building 1: ', end = ' ')
printLinkedList(building_1)
print('Building 2: ', end = ' ')
printLinkedList(building_2)
returned_value = check_similar(building_1, building_2)
print(returned_value) #This should print 'Not Similar'
unittest.output_test(returned_value, 'Not Similar')
print()

"""Remove Compartment"""

def remove_compartment(head,n):
  #To DO
  temp = head
  prev = None
  while temp.next != None:
    if prev == None:
      if temp.elem == n:
        rem = temp
        head = temp.next
      else:
        prev = temp
        rem = temp.next
    elif prev != None and temp.elem == n:
        rem = temp
    else:
        prev = temp
        rem = temp
    temp = temp.next
  prev.next = rem.next
  rem = None
  return head
  #return None



print('==============Test Case 1=============')
head = createList(np.array([14,10,15,10,41,10,72]))
number = 10
print('Original Compartment Sequence: ', end = ' ')
printLinkedList(head)
head = remove_compartment(head,number)
print('Changed Compartment Sequence: ', end = ' ')
printLinkedList(head) #This should print 14-->10-->15-->10-->41-->72
print()

print('==============Test Case 2=============')
head = createList(np.array([10,15,33,41,14,72]))
number = 10
print('Original Compartment Sequence: ', end = ' ')
printLinkedList(head)
head = remove_compartment(head,number)
print('Changed Compartment Sequence: ', end = ' ')
printLinkedList(head) #This should print 15-->33-->41-->14-->72
print()

print('==============Test Case 3=============')
head = createList(np.array([10,15,33,41,14,72]))
number = 56
print('Original Compartment Sequence: ', end = ' ')
printLinkedList(head)
head = remove_compartment(head,number)
print('Changed Compartment Sequence: ', end = ' ')
printLinkedList(head) #This should print 10-->15-->33-->41-->14-->72
print()

"""Capture the Flag"""

def capture_the_flag(head):
  #To Do
  temp = head
  count = 1
  new_head = None
  flag = True
  while temp != None:
    if (temp.elem%count == 0):
      if new_head == None:
        new_head = Node(temp.elem)
        tail = new_head
      else:
        new_node = Node((temp.elem//count))
        tail.next = new_node
        tail = new_node
    else:
      flag = False
    count += 1
    temp = temp.next
  if flag == False:
    return f"Linkwise"
  else:
    return new_head
  #return None

print('==============Test Case 1=============')
head = createList(np.array([11,8,21,20,5,42]))
print('Original Sequence: ', end = ' ')
printLinkedList(head)
new_head = capture_the_flag(head)
print('The flag is: ', end= ' ')
if type(new_head) == str:
  print(new_head)
else:
  printLinkedList(new_head) #This should print 11→4→7→5→1→7
print()

print('==============Test Case 2=============')
head = createList(np.array([11,8,28,20,5,42]))
print('Original Sequence: ', end = ' ')
printLinkedList(head)
new_head = capture_the_flag(head)
print('The flag is: ', end= ' ')
if type(new_head) == str:
  print(new_head) #This should print Linkwise
else:
  printLinkedList(new_head)
print()

"""Shuffle on song"""

def shuffle_on_song(head):
  #To DO
  temp = head
  new_head = None
  nw = None
  while temp != None:
    if ((ord(temp.elem))%2 == 0):
      if new_head == None:
        new_head = temp
        even_nodes = new_head
      else:
        even_nodes.next = temp
        even_nodes = temp
    else:
      if (nw == None):
        nw = temp
        odd_nodes = nw
      else:
        odd_nodes.next = temp
        odd_nodes = temp
    temp = temp.next
  even_nodes.next = nw
  return new_head
  # return None

print('==============Test Case 1=============')
head = createList(np.array(['S','E','N','P','A','I']))
print('Original Play List: ', end = ' ')
printLinkedList(head)
newhead =  shuffle_on_song(head)
print('New Play List: ', end = ' ')
printLinkedList(newhead) #This should print N-->P-->S-->E-->A-->I
print()

print('==============Test Case 2=============')
head = createList(np.array(['N','I','S','H','I','N','O','Y','A']))
print('Original Play List: ', end = ' ')
printLinkedList(head)
newhead =  shuffle_on_song(head)
print('New Play List: ', end = ' ')
printLinkedList(newhead) #This should print N-->H-->N-->I-->S-->I-->O-->Y-->A
print()

"""BONUS

Assemble Conga Line
"""

def assemble_conga_line(conga_line, candidate_line, idx):
  #To Do
  return None


print('==============Test Case 1=============')
conga_line = createList(np.array([10,15,34,41,56,72]))
print('Original Conga Line: ', end = ' ')
printLinkedList(conga_line)
candidate_line = createList(np.array([16,2,36,52,40,77]))
print('Original candidate Line: ', end = ' ')
printLinkedList(candidate_line)
insertion_idx = 3
returned_value = assemble_conga_line(conga_line, candidate_line, insertion_idx)
print('Changed Conga Line: ', end = ' ') #This should print 10-->15-->34-->40-->41-->56-->72
printLinkedList(returned_value)

print('==============Test Case 2=============')
conga_line = createList(np.array([10,15,34,41,56,72]))
print('Original Conga Line: ', end = ' ')
printLinkedList(conga_line)
candidate_line = createList(np.array([6,16,8,36,7,40,77]))
print('Original candidate Line: ', end = ' ')
printLinkedList(candidate_line)
insertion_idx = 0
returned_value = assemble_conga_line(conga_line, candidate_line, insertion_idx)
print('Changed Conga Line: ', end = ' ') #This should print 8-->10-->15-->34-->41-->56-->72
printLinkedList(returned_value)

print('==============Test Case 3=============')
conga_line = createList(np.array([10,15,34,41,56,72]))
print('Original Conga Line: ', end = ' ')
printLinkedList(conga_line)
candidate_line = createList(np.array([6,12,8,36,7,40,77]))
print('Original candidate Line: ', end = ' ')
printLinkedList(candidate_line)
insertion_idx = 2
returned_value = assemble_conga_line(conga_line, candidate_line, insertion_idx)
print('Changed Conga Line: ', end = ' ') #This should print 10-->15-->34-->41-->56-->72
printLinkedList(returned_value)