# -*- coding: utf-8 -*-
"""Lab02_21201359.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TU8KxKn3UVYvHXwzO90yE-W9oBbJZtzA

**Instructions to Follow (Failing to follow these will result mark penalties).**


1.   You can **NOT** use any built-in function except len()
2.   You can use the **shape** tuple of numpy arrays
2.   You can **NOT** use any other python collections (e.g: tuple, dictionaries etc.) except array.
3. We will initialize a new array using numpy library. We have to mention the fixed size during initialization. There might be two approach.

  i. arr = np.zeros((10), dtype = int) #Initializing an array length 10 with values 0

  ii. arr = np.array([10, 20, 30, 40]) #Initializing an array length 4 with the values.
4. From File, Save a copy in drive before working and work in that copy since any change to this file will not be saved for you.
"""

# You must run this cell to install dependency
! pip3 install fhm-unittest
! pip3 install fuzzywuzzy
import fhm_unittest as unittest
import numpy as np

#You must run this cell to print matrix and for the driver code to work
def print_matrix(m):
  row,col = m.shape
  for i in range(row):
    c = 1
    print('|', end='')
    for j in range(col):
      c += 1
      if(len(str(m[i][j])) == 1):
        print(' ',m[i][j], end = '  |')
        c += 6
      else:
        print(' ',m[i][j], end = ' |')
        c += 6
    print()
    print('-'*(c-col))

"""#Zigzag Walk"""

def walk_zigzag(floor):
   #To Do
  row,column = floor.shape
  for i in range(column):
    if i%2 == 0:
      for j in range(row):
        if j%2 == 0:
          print(floor[j][i], end = " ")
    else:
      for k in range(row-1, -1, -1):
        if k%2 != 0:
          print(floor[k][i], end = " ")
    print()
  # pass



floor = np.array([[ '3' , '8' , '4' , '6' , '1'],
                  ['7' , '2' , '1' , '9' , '3'],
                  ['9' , '0' , '7' , '5' , '8'],
                  ['2' , '1' , '3' , '4' , '0'],
                  ['1' , '4' , '2' , '8' , '6']]
                )

print_matrix(floor)
print('Walking Sequence:')
walk_zigzag(floor)
#This should print
# 3 9 1
# 1 2
# 4 7 2
# 4 9
# 1 8 6
print('################')
floor = np.array([[ '3' , '8' , '4' , '6' , '1'],
                  ['7' , '2' , '1' , '9' , '3'],
                  ['9' , '0' , '7' , '5' , '8'],
                  ['2' , '1' , '3' , '4' , '0']]
                )

print_matrix(floor)
print('Walking Sequence:')
walk_zigzag(floor)
#This should print
# 3 9
# 1 2
# 4 7
# 4 9
# 1 8

"""#Wall Up Trost District"""

def create_fence(district, depth):
    district_row, district_col = district.shape
    # new_row = row+(2*depth)
    # new_col = col+(2*depth)
    # district_wall = np.full([new_row,new_col], 8)
    # #print(district_wall)
    # for i in range(row):
    #   for j in range(col):
    #     district_wall[i+depth][j+depth] = district[i][j]
    # return district_wall
    # TO DO
    new_array = np.full(([(district_row+(2*depth)),(district_col+(2*depth))]), 8)
    #print(new_array)
    for i in range(district_row):
      for j in range(district_col):
        new_array[i+depth][j+depth] = district[i][j]

    return new_array

depth = 1
district = np.array([[2,3,4], [3,4,6], [2,1,4]])
print_matrix(district)
ans = create_fence(district, depth)
print_matrix(ans)
#This will print
# |  8  |  8  |  8  |  8  |  8  |
# -------------------------------
# |  8  |  2  |  3  |  4  |  8  |
# -------------------------------
# |  8  |  3  |  4  |  6  |  8  |
# -------------------------------
# |  8  |  2  |  1  |  4  |  8  |
# -------------------------------
# |  8  |  8  |  8  |  8  |  8  |
# -------------------------------
print('################')
depth = 2
district = np.array([
                 [2,3,4,1],
                 [3,4,6,5],
                 [2,1,4,7]
                ])
print_matrix(district)
ans = create_fence(district, depth)
print_matrix(ans)

"""#Crows vs Cats"""

def strength_difference(clubroom):
  strength_diff = np.zeros(100, dtype = int)
  #To Do
  row,column = clubroom.shape
  k = 0
  for i in range(row-1):
    for j in range(column-1):
      temp1 = clubroom[i][j+1]
      temp2 = clubroom[j+1][i]
      diff = temp1 - temp2
      if i == j or i < j:
        strength_diff[k] = diff
        k += 1

  print("Size of the strength_diff array: ", k) # Bonus answer

  new_array = np.zeros(k, dtype = int)
  for idx in range(k):
    new_array[idx] = strength_diff[idx]
  return new_array


clubroom = np.array([
[1,  2,  9,  7],
[4,  5,  1,  8],
[3,  6,  2,  7],
[2,  8,  6,  3]
])
print_matrix(clubroom)
returned_value = strength_difference(clubroom)
print('Strength Difference Array is : ', returned_value)
unittest.output_test(returned_value, np.array([-2, 6, 5, -5, 0, 1]))

"""#ATM's Triangle"""

def atm_triangle(n):
  #pass
  matrix = np.zeros([n,n], dtype = int)
  #print(matrix)
  for i in range(n):
    temp = 0
    for j in range(i+1):
      if i == j:
        matrix[i][j] = i+1
      elif j == 0:
        matrix[i][j] = i+1
        temp = matrix[i-1][j]
      else:
        temp = temp + matrix[i-1][j]
        matrix[i][j] = temp

  #print(matrix)
  return matrix


def print_without_none(matrix):
  #this prints the non None elements of matrix
  r,c = matrix.shape
  for i in range(r):
    for j in range(c):
      if matrix[i][j] != 0:
        print(matrix[i][j], end = "  ")
    print()
  #pass


n = 5
returned_value = atm_triangle(n)
print_without_none(returned_value)
#This should print
# 1
# 2  2
# 3  4  3
# 4  7  10  4
# 5  11 21  25  5

# i = 0
  # while i < n:
  #   sum = 0
  #   for j in range(i+1):
  #     if j == 0 or i == j:
  #       matrix[i][j] = i+1
  #       if j == 0:
  #         sum = matrix[i-1][j]
  #     else:
  #       sum = sum + matrix[i-1][j]
  #       matrix[i][j] = sum
  #   i += 1
  # return matrix

"""#Trace The BOT"""

def moving_around(cmds):
  grid = np.full((7, 7), '.')
  #To Do
  r,c = grid.shape
  grid[3][3] = "-"
  i = 3
  j = 3
  for idx in range(len(cmds)):
        if cmds[idx] == 1:
          i = i - 2
          j = j - 3
        if cmds[idx] == 2:
          i = i - 2
          j = j - 1
        if cmds[idx] == 3:
          i = i - 3
          j = j - 2
        if cmds[idx] == 4:
          i = i - 1
          j = j - 2
        if cmds[idx] == 5:
          i = i - 2
          j = j + 1
        if cmds[idx] == 6:
          i = i - 2
          j = j + 3
        if cmds[idx] == 7:
          i = i - 3
          j = j + 2
        if cmds[idx] == 8:
          i = i - 1
          j = j + 2
        if cmds[idx] == 9:
          i = i + 2
          j = j - 3
        if cmds[idx] == 10:
          i = i + 2
          j = j - 1
        if cmds[idx] == 11:
          i = i + 1
          j = j - 2
        if cmds[idx] == 12:
          i = i + 3
          j = j - 2
        if i >= 0 and j>= 0:
          grid[i][j] = "*"
          t1 = i
          t2 = j
        else:
          grid[t1][t2] = "/"
        #pass
  return grid

cmds = np.array([5,11,2,9])
result = moving_around(cmds)
print_matrix(result)
#This should print
# -------------------------------------------
# |  .  |  /  |  .  |  .  |  .  |  .  |  .  |
# -------------------------------------------
# |  .  |  .  |  .  |  .  |  *  |  .  |  .  |
# -------------------------------------------
# |  .  |  .  |  *  |  .  |  .  |  .  |  .  |
# -------------------------------------------
# |  .  |  .  |  .  |  -  |  .  |  .  |  .  |
# -------------------------------------------
# |  .  |  .  |  .  |  .  |  .  |  .  |  .  |
# -------------------------------------------
# |  .  |  .  |  .  |  .  |  .  |  .  |  .  |
# -------------------------------------------
# |  .  |  .  |  .  |  .  |  .  |  .  |  .  |
# -------------------------------------------